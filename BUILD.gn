# CrystalDMI

import("//build/config/precompiled_header.gni")
import("//build/config/static_shared.gni")
import("//build/config/win/manifest.gni")

group("crystal_dmi_all") {
  public_deps = [
    ":crystal_dmi",
    "winring0:winring0_all",
  ]
}

precompiled_header("precompiled") {
  precompiled_header = "stdafx.h"
  precompiled_source = "stdafx.cc"
}

# CrystalDMI ported to GN/Ninja!
executable("crystal_dmi") {
  configs -= [ "//build/config/win:console", ]
  configs += [
    "//build/config/win:windowed",
    ":crystal_dmi_config",
    ":precompiled",
  ]

  sources = [
    "winring0/source/dll/ols_api_init.h",
    "winring0/source/dll/ols_api_init_def.h",
    "winring0/source/dll/ols_def.h",
  ]

  sources += [
    "crystal_dmi.cc",
    "crystal_dmi.h",
    "crystal_dmi.rc",
    "crystal_dmi_dlg.cc",
    "crystal_dmi_dlg.h",
    "resource.h",
    "stdafx.h",
  ]

  deps = [
    ":crystal_dmi_manifest",
    "winring0:winring0",
  ]
}

windows_manifest("crystal_dmi_manifest") {
  sources = [ as_invoker_manifest, ]

  if (use_common_controls) {
    sources += [ common_controls_manifest, ]
  }
}

# Reverse lib linking order for ATL!
config("crystal_dmi_config") {
  defines = []
  ldflags = []
  libs = []
  include_dirs = [
    ".",
    "./winring0/source/dll/",
  ]
  defines += [
    "_SECURE_ATL",
    "_PHYSICAL_MEMORY_SUPPORT",
    "RUN_TIME_DYNAMIC_LINKING",
  ]
  if (is_debug) {
    ldflags += [
      "/NODEFAULTLIB:uafxcwd.lib",
      "/NODEFAULTLIB:libcmtd.lib",
    ]
    libs += [
      "uafxcwd.lib",
      "libcmtd.lib",
    ]
  } else {
    ldflags += [
      "/NODEFAULTLIB:uafxcw.lib",
      "/NODEFAULTLIB:libcmt.lib",
    ]
    libs += [
      "uafxcw.lib",
      "libcmt.lib",
    ]
  }
}
